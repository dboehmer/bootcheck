##!/bin/sh
set -x
### ENVIRONMENT ###

# buit-in values:
ALGORITHMS="cksum md5sum sha1sum sha224sum sha256sum sha384sum sha512sum"
CONFIG_FILE="/etc/bootcheck.conf"
VERSION=1.0

SUCCESS=0
ERROR=1
WARNING=2
MOD_DETECTED=23

COLUMNS=$(tput cols)
LINES=$(tput lines)

# default configurable values:
action=warning
enable_debugging=0
enable_logging=0
enable_sha512sum=1
enable_logging=0
log_file=/var/log/bootcheck.log
storage=/var/lib/bootcheck
target=/boot



### USEFUL FUNCTIONS ###

# return calculated hash
hash() {
    # $1   hash algorithm as executable file (e.g. "md5sum")
    echo $($1 `find $target -type f` | $1 | cut -d " " -f 1)
}

# calculate hash and store to a file with the algorithm's name
store() {
    hash $1 > "$tmp/$1"
}

# calculate current hash and compare to old hash
check() {
    current=$(hash $1)
    
    # hashes are equal
    [ "$current" == "$(cat $tmp/$1)" ] && return $SUCCESS
    
    # else: modified!
    return $MOD_DETECTED
}

# alert -- do action defined in config
alert() {
    echo "WOOHHHAAAAAA" >&2
}


### STARTUP ###

# load values given in config file if exists
# syntax is just like shell and can be sourced
[ -e $CONFIG_FILE ] && . $CONFIG_FILE

# sanity checks on startup
[ ! -d "$storage" ] || [ ! -w "$storage" ] && {
    echo "Storage directory $storage does not exist or is not writeable!"
    exit $ERROR
}



### CASE 1: SYSTEM SHUTDOWN => STORE HASH OF TARGET DIR ###

if [ $# == 1 ] && [ "$1" == "--store" ]; then
    
    # check if target is empty and abort if so
    [ "$(ls -A $target)" ] || {
        echo "Error: $target directory empty!" >&2
        exit $ERROR
    }
    
    # create temporary directory
    tmp=$(mktemp --directory "/tmp/bootcheck.XXXXXXXXXX")

    [ -z $tmp ] && {
        echo "Error: Creation of temporary dir failed!" >&2
        return $ERROR
    }
    
    # run any algorithm enabled by config (default: only sha512sum)
    for algorithm in $ALGORITHMS; do
        [ "{enable_!algorithm}" ] && [ $(type -P $algorithm) ] && store $algorithm
    done

    [ $(ls -1A $tmp | wc -l) == 0 ] && {
        echo "Error: No hashes created!" >&2
        rmdir $tmp
        exit $ERROR
    }
    
    # store ad
    echo "Created by bootcheck $VERSION on $(date)" > $tmp/info
    
    # create hash package
    cd $tmp
    tar cf $storage/hash.tar *
    
    # delete temporary files
    rm -r $tmp
    
    exit $SUCCESS
fi



### CASE 2: SYSTEM BOOTS UP => RECOGNIZE ANY MODIFICATIONS ###

if [ $# == 0 ]; then
    if [ ! -e "$storage/hash.tar" ]; then
        echo "Warning: No hash stored yet -- cannot check target!" >&2
        exit $WARNING
    fi
    
    tmp=$(mktemp --directory "/tmp/bootcheck.XXXXXXXXXX")

    [ -z $tmp ] && {
        echo "Error: Creation of temporary dir failed!" >&2
        return $ERROR
    }
    
    # extract old hash tar
    cd $tmp
    tar xf $storage/hash.tar
    
    # count var
    i=0
    
    # for any algorithm: check if hash is available and if so compare
    for algorithm in $ALGORITHMS; do
        if [ -e "$tmp/$algorithm" ] && [ $(type -P $algorithm) ]; then
            check $algorithm
            if [ "$?" == "$SUCCESS" ]; then
                # increase number of checks
                i=$[$i+1]
            else
                alert
                exit $MOD_DETECTED
            fi
        fi
    done
    
    if [ $i == 0 ]; then
        echo "Warning: Could NOT check for modifications by any algorithm due to missing hashes!" >&2
    else
        echo "Info: Target checked by $i hash algorithms proved to be unmodified."
    fi
    
    exit $SUCCESS
fi


### ELSE: NO VALID OPTIONS GIVEN => SHOW HELP ###

echo "Usage: $0 [--store]

    no args  check target directory now and print warning if modified

    --store  calculate hash of target directory and store it
             for recognizing modifications later on" >&2

exit $ERROR
