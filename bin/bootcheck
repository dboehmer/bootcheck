##!/bin/sh


### USEFUL FUNCTIONS ###

# return calculated hash
hash() {
    # $1   hash algorithm as executable file (e.g. "md5sum")
    
    # target directory: hash files and hash the list of hashes
    [ -d "$target" ] && echo $($1 `find $target -type f` | $1 | cut -d " " -f 1)
    
    # target block device or regular file: hash the whole device
    ([ -b "$target" ] || [ -f "$target" ]) && echo $($1 $target | cut -d " " -f 1)
}

# calculate hash and store to a file with the algorithm's name
store() {
    # $1   hash algorithm
    # $tmp temporary working directory
    
    hash $1 > "$tmp/$1"
}

# calculate current hash and compare to old hash
check() {
    # $1   hash algorithm
    # $tmp temporary working directory
    
    current=$(hash $1)
    
    # hashes are equal
    [ "$current" == "$(cat $tmp/$1)" ] && return $E_SUCCESS
    
    # else: modified!
    return $MOD_DETECTED
}

# print horizontal line of "#"s
line() {
    n=1
    [ -n $1 ] && n=$1
    
    for i in $(seq 1 $n); do
        for col in $(seq 1 $COLUMNS); do
            echo -n "#"
        done
    done
}

# echo text centered
cecho() {
    # $1   text to be printed
    
    word="$1"
    while [ ${#word} -lt $COLUMNS ]; do
        word="$word ";
        if [ ${#word} -lt $COLUMNS ]; then
            word=" $word"
        fi;
    done;
    echo "$word";
}

# print warning (alert)
warning() {
    line 2
    cecho "YOUR SYSTEM HAS BEEN MODIFIED."
    cecho "BE AWARE YOUR ENCRYPTION COULD BE BROKEN."
    line 2
}

# alert -- do action defined in config
alert() {
    case "$alert_action" in
        "ignore")
            # do nothing
            ;;
        "warn")
            warning
            ;;
        "prompt")
            warning
            # read input until users types "YES"
            input=""
            until [ "$input" == "YES" ]; do
                echo "Are you sure you want to continue boot process? (Propably dangerous!)"
                echo "(Type uppercase yes)"
                read input
            done
            ;;
        "halt")
            warning
            
            # countdown if enabled
            if [ "$halt_countdown" -gt 0 ]; then
                for remaining in $(seq $halt_countdown -1 1); do
                    echo "Halting system in $remaining seconds -- press any key to abort!"
                    
                    # wait for 1 second OR user input
                    read -n 1 -t 1 input && {
                        # ask the magic question
                        echo "Are you sure you want to continue boot process? (Propably dangerous!)"
                        echo "(Type uppercase yes)"
                        read input
                        [ "$input" == "YES" ] && return
                    }
                done
            fi
            
            halt -f
    esac
}

# write something to the log file if logging enabled
log() {
    # $1   log entry text
    
    # write if logging enabled
    [ "$enable_logging" ] && {
        logger -f "$log_file" "$*"
    }
}

# echo warning/error and log it
e() {
    # $1   warning or error message
    echo $1
    log $1
}


### STARTUP ###

# default config values:
alert_action="warning"
config_file="/etc/bootcheck.conf"
enable_debugging=0
enable_logging=0
enable_sha512sum=1
enable_logging=0
halt_countdown=3
log_file="/var/log/bootcheck.log"
storage="/var/lib/bootcheck"
target="/boot"

# load values given in config file if exists
# syntax is just like shell and can be sourced
[ -e $config_file ] && . $config_file

# buit-in values:
ALGORITHMS="cksum md5sum sha1sum sha224sum sha256sum sha384sum sha512sum"
VERSION="1.0"
FILE_FORMAT_VERSION="1.0"

# return values
E_SUCCESS=0
E_ERROR=1
E_WARNING=2
MOD_DETECTED=23

# store terminal dimensions
COLUMNS=$(tput cols)
LINES=$(tput lines)


# sanity checks on startup:

# $target file/directory/device
[ ! -b "$target" ] && [ ! -d "$target" ] && [ ! -f "$target" ] && {
    e "Error: Target is neither block device nor directory nor regular file!"
    exit $E_ERROR
}

[ -r "$target" ] || {
    e "Error: Target is not readable!"
    exit $E_ERROR
}

[ -d "$target" ] && [ ! -x "$target" ] && {
    e "Error: Target directory is not accessable!"
    exit $E_ERROR
}

# $storage file
([ -d "$storage" ] && [ -r "$storage" ] && [ -x "$storage" ]) || {
    e "Error: Storage directory $storage does not exist or is not accessable or readable!"
    exit $E_ERROR
}

# $log_file
touch $log_file
[ -w "$log_file" ] || {
    e "Warning: Log file \"$log_file\" is not writable!"
}



### CASE 1: SYSTEM SHUTDOWN => STORE HASH OF TARGET DIR ###

if [ $# == 1 ] && [ "$1" == "--store" ]; then
    
    # check if target is empty and abort if so
    [ "$(ls -A $target)" ] || {
        e "Error: $target directory empty!" >&2
        exit $E_ERROR
    }
    
    # create temporary directory
    tmp=$(mktemp --directory "/tmp/bootcheck.XXXXXXXXXX")

    [ -z $tmp ] && {
        e "Error: Creation of temporary dir failed!" >&2
        return $E_ERROR
    }
    
    # run any algorithm enabled by config (default: only sha512sum)
    for algorithm in $ALGORITHMS; do
        [ "{enable_!algorithm}" ] && [ $(type -P $algorithm) ] && store $algorithm
    done

    [ $(ls -1A $tmp | wc -l) == 0 ] && {
        e "Error: No hashes created!" >&2
        rmdir $tmp
        exit $E_ERROR
    }
    
    # store ad and information
    echo "Created by bootcheck $VERSION on $(date)\n\nSee http://github.com/dboehmer/bootcheck for details" > $tmp/README
    echo $(date +%s) > $tmp/timestamp
    echo $target > $tmp/target
    echo $FILE_FORMAT_VERSION > $tmp/file_format_version
    echo $VERSION > $tmp/version
    
    # create hash package
    cd $tmp
    tar cf $storage/hash.tar *
    
    [ "$?" == 0 ] || {
        e "Error: creation of hash tar failed!"
        cd /
        rm -r $tmp
        exit $E_ERROR
    }
    
    # delete temporary files
    cd /
    rm -r $tmp
    
    exit $E_SUCCESS
fi



### CASE 2: SYSTEM BOOTS UP => RECOGNIZE ANY MODIFICATIONS ###

if [ $# == 0 ]; then
    if [ ! -e "$storage/hash.tar" ]; then
        e "Warning: No hash stored yet -- cannot check target!" >&2
        exit $E_WARNING
    fi
    
    tmp=$(mktemp --directory "/tmp/bootcheck.XXXXXXXXXX")

    [ -z $tmp ] && {
        e "Error: Creation of temporary dir failed!" >&2
        return $E_ERROR
    }
    
    # extract old hash tar
    cd $tmp
    tar xf $storage/hash.tar
    
    # check the archive: file format
    [[ "$(cat $tmp/file_format_version)" == 1.* ]] || {
        e "Error: stored hash tar has different version of file format which is not compatible with this program version!"
        cd /
        rm -r $tmp
        exit $E_ERROR
    }
    
    # check the stored hash: target
    [ "$(cat $tmp/target)" == "$target" ] || {
        e "Error: stored hash was calculated for a different target! Store new hash before next check."
        cd /
        rm -r $tmp
        exit $E_ERROR
    }
    
    # count var
    i=0
    
    # for any algorithm: check if hash is available and if so compare
    for algorithm in $ALGORITHMS; do
        if [ -e "$tmp/$algorithm" ] && [ $(type -P $algorithm) ]; then
            check $algorithm
            if [ "$?" == "$E_SUCCESS" ]; then
                # increase number of checks
                i=$[$i+1]
                
                log "Info: Successfully checked target \"$target\" by $algorithm"
            else
                log "WARNING: DETECTED MODIFICATIONS ON TARGET \"$target\"!"
                alert
                cd /
                rm -r $tmp
                exit $MOD_DETECTED
            fi
        fi
    done
    
    # clean up
    cd /
    rm -r $tmp
    
    if [ $i == 0 ]; then
        e "Warning: Could NOT check for modifications by any algorithm due to missing hashes!" >&2
        exit $E_WARNING
    else
        echo "Info: Target checked by $i hash algorithms and proved to be unmodified."
        exit $E_SUCCESS
    fi
fi


### ELSE: NO VALID OPTIONS GIVEN => SHOW HELP ###

echo "Usage: $0 [--store]

    no args  check target now and trigger alert if it was modified

    --store  calculate hash of target and store it
             for recognizing modifications later on" >&2

exit $E_ERROR
